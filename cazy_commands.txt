neo4j
w4gn3r


LOAD CSV WITH HEADERS FROM 'file:///taxon.csv' AS row MERGE (t:taxon {name: row.name, rank: row.rank, taxid: row.taxid});

LOAD CSV WITH HEADERS FROM 'file:///genome.csv' AS row MERGE (g:genome {name: row.name, cellulose: toInteger(row.cellulose)});


LOAD CSV WITH HEADERS FROM 'file:///cazy.csv' AS row MERGE (c:cazy {name: row.name, activities: row.activities, clan: row.clan, mechanism: row.mechanism, catalytic: row.catalytic});

LOAD CSV WITH HEADERS FROM 'file:///ec_final.csv' AS row MERGE (e:ec {name: row.name, sysname: row.sysname, reaction: row.reaction});

CREATE CONSTRAINT ON (t:taxon) ASSERT t.name IS UNIQUE;
CREATE CONSTRAINT ON (g:genome) ASSERT g.name IS UNIQUE;
CREATE CONSTRAINT ON (c:cazy) ASSERT c.name IS UNIQUE;
CREATE CONSTRAINT ON (e:ec) ASSERT e.name IS UNIQUE;

LOAD CSV WITH HEADERS FROM 'file:///taxon_connections.csv' AS row MERGE (f1:taxon {name: row.from}) MERGE (f2:taxon {name: row.to}) MERGE (f1)-[r:has_taxon]->(f2);

LOAD CSV WITH HEADERS FROM 'file:///genome_connections.csv' AS row MERGE (f1:taxon {name: row.from}) MERGE (f2:genome {name: row.to}) MERGE (f1)-[r:has_genome]->(f2);


LOAD CSV WITH HEADERS FROM 'file:///has_cazy.csv' AS row MERGE (f1:genome {name: row.from}) MERGE (f2:cazy {name: row.to}) MERGE (f1)-[r:has_cazy {amount: toInteger(row.amount)}]->(f2);

LOAD CSV WITH HEADERS FROM 'file:///cazy_ec.csv' AS row MERGE (f1:cazy {name: row.from}) MERGE (f2:ec {name: row.to}) MERGE (f1)-[r:has_ec]->(f2);

MATCH (g:genome)
WHERE g.cellulose = 1 OR g.cellulose = 0
CALL apoc.create.addLabels([id(g)], ["known_genome"]) YIELD node
RETURN distinct 'done';

MATCH (g:genome)
WHERE g.cellulose = 2
CALL apoc.create.addLabels([id(g)], ["unknown_genome"]) YIELD node
RETURN distinct 'done';



MATCH (n) DETACH DELETE n;

DROP CONSTRAINT ON ( ec:ec ) ASSERT (ec.name) IS UNIQUE;
DROP CONSTRAINT ON ( cazy:cazy ) ASSERT (cazy.name) IS UNIQUE;
DROP CONSTRAINT ON ( taxon:taxon ) ASSERT (taxon.name) IS UNIQUE;
DROP CONSTRAINT ON ( genome:genome ) ASSERT (genome.name) IS UNIQUE;



call db.schema.visualization()


match p=(t:genome)-[:has_cazy]->(c:cazy) where c.name CONTAINS "GH" 
WITH t.name AS name, COUNT(DISTINCT(c)) AS gh_count 
RETURN avg(gh_count)

match p=(t:genome)-[:has_cazy]->(c:cazy) 
where t.name = "Formosa agariphila KMM 3901" AND c.name CONTAINS "GH" 
return p

MATCH p=(t:taxon) -[:has_taxon*1..3]-> (t1:taxon) -[:has_genome]->(g:genome) 
WHERE t.name="Formosa" 
RETURN p;



MATCH (g1:genome)-[r:has_cazy]->(c:cazy)<-[r1:has_cazy]-(g2:genome {name: "Formosa agariphila KMM 3901"}) WHERE c.name CONTAINS 'GH'
RETURN g1.name, COUNT(DISTINCT c) as shared_gh ORDER BY shared_gh DESC




MATCH (t0:taxon {name:"Formosa"})-[r0:has_taxon*1..3]->(t1:taxon)-[r1:has_genome]->(g1:genome)-[r:has_cazy]->(c:cazy) 
WHERE NOT g1.name="Formosa agariphila KMM 3901" 
WITH COLLECT(DISTINCT c) AS filter_list 
MATCH (target:genome {name:"Formosa agariphila KMM 3901"})-[r1:has_cazy]->(c1:cazy) 
WHERE NOT c1 IN filter_list RETURN c1.name, c1.activities, r1.amount
ORDER BY c1.name


MATCH p = (e:ec) <-[r:has_ec]- (c:cazy) <- [r1:has_cazy]-(g:genome) <-[r2*1..9]-(t1:taxon {rank: "class"}) WHERE e.reaction CONTAINS "glucomannan" RETURN DISTINCT(t1.name)

query getTaxon {
	genomes (where: { name: "Acetivibrio saccincola GGR1" }) {
    name
    cazys {name, amount}
  }
}


query getSons {
	taxons (where: { name: "Escherichia" }) {
    name
    sons {
      name
      taxid
    }
  }
}


query getGenomeCazy {
	taxons (where: { name: "Formosa" }) {
    name
    rank
    taxid
    genomes {
      name
      cazys {name, amount}
    }
  }
}



MATCH (g:genome)
WHERE g.cellulose = 0 or g.cellulose = 1
SET g:Model_Data;

MATCH (g:genome)
WHERE NOT (g:Model_Data)
SET g:Holdout_Data;

CALL gds.graph.create(
  'cazy_genomes',
  {Model_Data: {properties:["cellulose"]}, Holdout_Data: {}, cazy: {}},
  {
    has_cazy: {
      orientation: 'UNDIRECTED',
      properties: 'amount'
    }
});

CALL gds.fastRP.mutate(
  'cazy_genomes',
  {
    embeddingDimension: 5,
    mutateProperty: 'fastrp_embedding'
  }
)
YIELD nodePropertiesWritten;


CALL gds.alpha.ml.nodeClassification.train('cazy_genomes', {
  nodeLabels: ['Model_Data'],
  modelName: 'nc-model',
  featureProperties: ['fastrp_embedding'],
  targetProperty: 'cellulose',
  randomSeed: 2,
  holdoutFraction: 0.2,
  validationFolds: 5,
  metrics: [ 'F1_WEIGHTED' ],
  params: [
    {penalty: 0.0625, batchSize:5},
    {penalty: 0.5, batchSize:5},
    {penalty: 1.0, batchSize:5},
    {penalty: 4.0, batchSize:5}
  ]
}) YIELD modelInfo
RETURN
  modelInfo.bestParameters AS winningModel,
  modelInfo.metrics.F1_WEIGHTED.outerTrain AS trainGraphScore,
  modelInfo.metrics.F1_WEIGHTED.test AS testGraphScore



CALL gds.alpha.ml.nodeClassification.predict.mutate('cazy_genomes', {
  nodeLabels: ['Model_Data', 'Holdout_Data'], //filter out the character nodes
  modelName: 'nc-model',
  mutateProperty: 'predicted_cellulose',
  predictedProbabilityProperty: 'predicted_cellulose_probability'
});

CALL gds.graph.streamNodeProperties(
  'cazy_genomes',
  ['predicted_cellulose', 'predicted_cellulose_probability'],
  ['Model_Data', 'Holdout_Data']
) YIELD nodeId, nodeProperty, propertyValue
RETURN gds.util.asNode(nodeId).name AS name, nodeProperty, propertyValue

match (g:genome) return g.name, g.cellulose, g.predicted_cellulose, g.predicted_cellulose_probability

CALL gds.graph.drop('cazy_genomes');
CALL gds.beta.model.drop('nc-model');

